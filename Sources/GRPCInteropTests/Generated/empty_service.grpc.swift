// Copyright 2018 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: src/proto/grpc/testing/empty_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

public import GRPCCore
internal import GRPCProtobuf

// MARK: - grpc.testing.EmptyService

/// Namespace containing generated types for the "grpc.testing.EmptyService" service.
public enum Grpc_Testing_EmptyService {
    /// Service descriptor for the "grpc.testing.EmptyService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "grpc.testing.EmptyService")
    /// Namespace for method metadata.
    public enum Method {
        /// Descriptors for all methods in the "grpc.testing.EmptyService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = []
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "grpc.testing.EmptyService" service.
    public static let grpc_testing_EmptyService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "grpc.testing.EmptyService")
}

// MARK: grpc.testing.EmptyService (server)

extension Grpc_Testing_EmptyService {
    /// Streaming variant of the service protocol for the "grpc.testing.EmptyService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > A service that has zero methods.
    /// > See https://github.com/grpc/grpc/issues/15574
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {}

    /// Service protocol for the "grpc.testing.EmptyService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > A service that has zero methods.
    /// > See https://github.com/grpc/grpc/issues/15574
    public protocol ServiceProtocol: Grpc_Testing_EmptyService.StreamingServiceProtocol {}

    /// Simple service protocol for the "grpc.testing.EmptyService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > A service that has zero methods.
    /// > See https://github.com/grpc/grpc/issues/15574
    public protocol SimpleServiceProtocol: Grpc_Testing_EmptyService.ServiceProtocol {}
}

// Default implementation of 'registerMethods(with:)'.
extension Grpc_Testing_EmptyService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {}
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Grpc_Testing_EmptyService.ServiceProtocol {
}

// Default implementation of methods from 'ServiceProtocol'.
extension Grpc_Testing_EmptyService.SimpleServiceProtocol {
}

// MARK: grpc.testing.EmptyService (client)

extension Grpc_Testing_EmptyService {
    /// Generated client protocol for the "grpc.testing.EmptyService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > A service that has zero methods.
    /// > See https://github.com/grpc/grpc/issues/15574
    public protocol ClientProtocol: Sendable {}

    /// Generated client for the "grpc.testing.EmptyService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > A service that has zero methods.
    /// > See https://github.com/grpc/grpc/issues/15574
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Grpc_Testing_EmptyService.ClientProtocol {
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Grpc_Testing_EmptyService.ClientProtocol {
}